# https://aka.ms/yaml
# https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/cross-platform-scripting
# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azdevops&tabs=yaml
# https://github.com/OpenImageIO/oiio/blob/master/INSTALL.md
  
jobs:
- job: 'ubuntu16_04'

  strategy:
    matrix:
      windows-py36:
        python.version_major: '3'
        python.version_minor: '6'
        python.version_patch: '4'
      windows-py37:
        python.version_major: '3'
        python.version_minor: '7'
        python.version_patch: '0'

  variables:
    python.version: '$(python.version_major).$(python.version_minor)'
    azure.vm_image: 'ubuntu-16.04'
    src.python: '$(Agent.BuildDirectory)/s/src/python'
    src.vcpkg: '$(Agent.BuildDirectory)/s/src/vcpkg'
    pypackage.version: '2.0.4+$(Build.BuildNumber)'
    # pypackage.os_name: 'Microsoft :: Windows'

  pool:
    vmImage: $(azure.vm_image)


  steps:

  # Select Python version to run on agent
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/use-python-version?view=azdevops
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
      addToPath: true

  # Make setup.py ready by substituting placeholders
  # - bash: |
  #     cd $(src.python)
  #     sed -i 's/PACKAGE_VERSION/$(pypackage.version)/g' setup.py
  #     sed -i 's/PYTHON_VERSION/$(python.version)/g' setup.py
  #     sed -i 's/OS_NAME/$(pypackage.os_name)/g' setup.py
  #     cat setup.py
  #   condition: eq( variables['Agent.OS'], 'Windows_NT' )
  #   displayName: Inject variable values into setup.py

  # Install vcpkg prerequisites
  - bash: |
      sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
      sudo apt-get update -y
      sudo apt-get install g++-7 -y
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Install prerequisites for the Microsoft "vcpkg" manager

  # Install vcpkg
  - bash: |
      git clone https://github.com/Microsoft/vcpkg.git 
      cd vcpkg 
      ./bootstrap-vcpkg.sh
      ./vcpkg integrate install
      ./vcpkg update
      pwd
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Install the Microsoft "vcpkg" manager
 
  # Copy customized port(s) into place
  - bash: |
      cp -r -v $(src.vcpkg)/ports/python3-py$(python.version)/* /home/vsts/work/1/s/vcpkg/ports/python3
      cp -r -v $(src.vcpkg)/ports/openimageio-py$(python.version)/* /home/vsts/work/1/s/vcpkg/ports/openimageio
      cp -r -v $(src.vcpkg)/ports/pybind11-py$(python.version)/* /home/vsts/work/1/s/vcpkg/ports/pybind11
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Override vcpkg port files

  # Install oiio prerequisites via vcpkg
  - bash: |
      cd vcpkg
      ./vcpkg list
      ./vcpkg install openexr:x64-linux
      ./vcpkg install tiff:x64-linux
      ./vcpkg install pybind11:x64-linux
      ./vcpkg list
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Install prerequisites

  # Install oiio
  - bash: |
      $env:OIIO_PYTHON_VERSION = "$(python.version)"
      cd vcpkg
      ./vcpkg list
      ./vcpkg install openimageio:x64-linux
      ./vcpkg list
    condition: eq( variables['Agent.OS'], 'Linux' )
    displayName: Install oiio

  # Debug Logs
  # - bash: |
  #     [ -f /home/sidney/Desktop/oiio/__init__.py ] && echo "Found" || echo "Not found"
  #   condition: eq( variables['Agent.OS'], 'Linux' )
  #   displayName: Build logs for oiio

  # Publish wheel as build artifact (see "Summary" in Azure Pipelines build)
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/publish-build-artifacts?view=azdevops
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop-$(python.version)