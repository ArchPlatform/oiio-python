# https://aka.ms/yaml
# https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/cross-platform-scripting
# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azdevops&tabs=yaml
# https://github.com/OpenImageIO/oiio/blob/master/INSTALL.md

jobs:
- job: 'windows'

  strategy:
    matrix:
#       linux-py36:
#         imageName: 'ubuntu-16.04'
#         python.version: '3.6'
#       mac-py36:
#         imageName: 'macos-10.13'
#         python.version: '3.6'
      windows-py36:
        imageName: 'vs2017-win2016'
        python.version: '3.6'
    # maxParallel: 3


  variables:
    oiio.tag: 'Release-2.0.4'
    oiio.sha512: 'f6de620fba52e871f546e129c2d4b1792ff20504ab4219d8098be48cb552fd70a7064e8d487b9e1ad6473deda57f116e7f0185d7778ef3c5da7c077415288356'


  pool:
    vmImage: $(imageName)


  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
      addToPath: true

  # Make setup.py ready
  - powershell: |
      cd $(Agent.BuildDirectory)/s/src
      sed -i 's/PACKAGE_VERSION/0.1.dev0/g' setup.py
      sed -i 's/PYTHON_VERSION/$(python.version)/g' setup.py
      sed -i 's/OS_NAME/Microsoft :: Windows/g' setup.py
      cat setup.py
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Rename variables in setup.py

  # Instal vcpkg
  - powershell: |
      cd C:/
      git clone https://github.com/Microsoft/vcpkg.git
      cd vcpkg
      .\bootstrap-vcpkg.bat
      .\vcpkg integrate install
      .\vcpkg update
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install the Microsoft "vcpkg" manager

  # Make edits to vcpkg oiio portfile.cmake
  - powershell: |
      cat C:/vcpkg/ports/openimageio/portfile.cmake
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Show contents of oiio portfile.cmake
  - powershell: |
      choco install -y sed
      sed -i '/REF Release-1.8.16/c\REF $(oiio.tag)' C:/vcpkg/ports/openimageio/portfile.cmake
      sed -i '/SHA512/c\SHA512 $(oiio.sha512)' C:/vcpkg/ports/openimageio/portfile.cmake
      sed -i '/HEAD_REF/c\HEAD_REF master' C:/vcpkg/ports/openimageio/portfile.cmake
      sed -i '/vcpkg_configure_cmake(/c\set(ENV{OIIO_PYTHON_VERSION} \"3.6\")\n\nvcpkg_configure_cmake(' C:/vcpkg/ports/openimageio/portfile.cmake
      sed -i '/-DUSE_PYTHON/c\-DUSE_PYTHON=ON' C:/vcpkg/ports/openimageio/portfile.cmake
      sed -i '/-DBUILD_MISSING_PYBIND11/c\-DBUILD_MISSING_PYBIND11=ON' C:/vcpkg/ports/openimageio/portfile.cmake
      sed -i '/-DBUILD_MISSING_DEPS/c\-DBUILD_MISSING_DEPS=ON' C:/vcpkg/ports/openimageio/portfile.cmake
      sed -i 's/LICENSE/LICENSE.md/g' C:/vcpkg/ports/openimageio/portfile.cmake
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Edit contents of oiio portfile.cmake
  - powershell: |
      cat C:/vcpkg/ports/openimageio/portfile.cmake
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Show contents of oiio portfile.cmake

  # Install oiio via vcpkg
  - powershell: |
      cd C:/vcpkg
      .\vcpkg list
      .\vcpkg install openexr:x64-windows
      .\vcpkg install tiff:x64-windows
      .\vcpkg install pybind11:x64-windows
      .\vcpkg list
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install prerequisites
  - powershell: |
      $env:OIIO_PYTHON_VERSION = "$(python.version)"
      cd C:/vcpkg
      .\vcpkg list
      .\vcpkg install openimageio:x64-windows
      .\vcpkg list
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install oiio

  # View files from built and installed oiio
  - powershell: |
      cd C:\vcpkg\installed\x64-windows\bin
      tree /F
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: oiio bin folder tree
  - powershell: |
      cd C:\vcpkg\installed\x64-windows\lib\python3.6\site-packages
      tree /F
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: oiio site-packages folder tree

  # Copy files into Python package
  - powershell: |
      cp -r C:\vcpkg\installed\x64-windows\lib\python3.6\site-packages\*.pyd $(Agent.BuildDirectory)/s/src/oiio
      cp -r C:\vcpkg\installed\x64-windows\bin\*.dll $(Agent.BuildDirectory)/s/src/oiio
      cd $(Agent.BuildDirectory)/s
      tree /F
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Copy files into oiio Python package
  - powershell: |
      cd $(Agent.BuildDirectory)/s/src
      pip install -U setuptools wheel
      python setup.py bdist_wheel --dist-dir="$(Build.ArtifactStagingDirectory)"
      cd $(Build.ArtifactStagingDirectory)
      tree /F
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Build wheel

  # Publish wheel as build artifact (see "Summary" in Azure Pipelines build)
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop