# https://aka.ms/yaml
# https://docs.microsoft.com/en-us/azure/devops/pipelines/scripts/cross-platform-scripting
# https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azdevops&tabs=yaml
# https://github.com/OpenImageIO/oiio/blob/master/INSTALL.md

jobs:
- job: 'oiio'

  strategy:
    matrix:
      windows-py36:
        python.version: '3.6'
    #   windows-py37:
    #     python.version: '3.7'
    # maxParallel: 3

  variables:
    azure.vm_image: 'vs2017-win2016'
    src.python: '$(Agent.BuildDirectory)/s/src/python'
    src.vcpkg: '$(Agent.BuildDirectory)/s/src/vcpkg'
    oiio.ref: 'bb2c617e83b3b264c9f4b7503d3c01c16570fdb7'
    oiio.head_ref: 'master'
    oiio.sha512: '5c198bd53ebc84847df3f8c40c0eedcb16d9e45ad9627d2e69faa44ba0966f74cac29cb3e93af5df7162ef4af82101770118e10695e25b287d05d499932fab0f'
    pypackage.version: '2.0.4-$(Build.BuildNumber)'
    pypackage.os_name: 'Microsoft :: Windows'

  pool:
    vmImage: $(azure.vm_image)


  steps:

  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/tool/use-python-version?view=azdevops
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
      addToPath: true

  # Make setup.py ready
  - powershell: |
      cd $(src.python)
      sed -i 's/PACKAGE_VERSION/$(pypackage.version)/g' setup.py
      sed -i 's/PYTHON_VERSION/$(python.version)/g' setup.py
      sed -i 's/OS_NAME/$(pypackage.os_name)/g' setup.py
      cat setup.py
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Inject variable values into setup.py

  # Instal vcpkg
  - powershell: |
      cd C:/
      git clone https://github.com/Microsoft/vcpkg.git
      cd vcpkg
      .\bootstrap-vcpkg.bat
      .\vcpkg integrate install
      .\vcpkg update
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install the Microsoft "vcpkg" manager

  # Make edits to vcpkg oiio portfile.cmake
  - powershell: |
      sed -i '/REF Release-/c\REF $(oiio.ref)' $(src.vcpkg)/ports/openimageio/portfile.cmake
      sed -i '/SHA512/c\SHA512 $(oiio.sha512)' $(src.vcpkg)/ports/openimageio/portfile.cmake
      sed -i '/HEAD_REF/c\HEAD_REF $(oiio.head_ref)' $(src.vcpkg)/ports/openimageio/portfile.cmake
      sed -i '/vcpkg_configure_cmake(/c\set(ENV{OIIO_PYTHON_VERSION} \"$(python.version)\")\n\nvcpkg_configure_cmake(' $(src.vcpkg)/ports/openimageio/portfile.cmake
      sed -i '/-DUSE_PYTHON/c\-DUSE_PYTHON=ON' $(src.vcpkg)/ports/openimageio/portfile.cmake
      sed -i '/-DBUILD_MISSING_PYBIND11/c\-DBUILD_MISSING_PYBIND11=ON' $(src.vcpkg)/ports/openimageio/portfile.cmake
      sed -i '/-DBUILD_MISSING_DEPS/c\-DBUILD_MISSING_DEPS=ON' $(src.vcpkg)/ports/openimageio/portfile.cmake
      sed -i 's/LICENSE/LICENSE.md/g' $(src.vcpkg)/ports/openimageio/portfile.cmake
      cat $(src.vcpkg)/ports/openimageio/portfile.cmake
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Modify oiio portfile.cmake

  # Copy customized port(s) into place
  - powershell: |
      cp -r -v $(src.vcpkg)/ports/openimageio/* C:/vcpkg/ports/openimageio
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Override vcpkg port files

  # Install oiio via vcpkg
  - powershell: |
      cd C:/vcpkg
      .\vcpkg list
      .\vcpkg install openexr:x64-windows
      .\vcpkg install tiff:x64-windows
      .\vcpkg install pybind11:x64-windows
      .\vcpkg list
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install oiio prerequisites
  - powershell: |
      $env:OIIO_PYTHON_VERSION = "$(python.version)"
      cd C:/vcpkg
      .\vcpkg list
      .\vcpkg install openimageio:x64-windows
      .\vcpkg list
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install oiio

  # View files from built and installed oiio
  - powershell: |
      cd C:\vcpkg\installed\x64-windows\bin
      tree /F
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Show contents of oiio bin folder tree
  - powershell: |
      cd C:\vcpkg\installed\x64-windows\lib\python$(python.version)\site-packages
      tree /F
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Show contents of oiio site-packages folder tree

  # Copy files into Python package
  - powershell: |
      cp -r -v C:\vcpkg\installed\x64-windows\lib\python$(python.version)\site-packages\*.pyd $(src.python)/oiio
      cp -r -v C:\vcpkg\installed\x64-windows\bin\*.dll $(src.python)/oiio
      cd $(src.python)
      tree /F
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Copy files into oiio Python package
  - powershell: |
      cd $(src.python)
      pip install -U setuptools wheel
      python setup.py bdist_wheel --dist-dir="$(Build.ArtifactStagingDirectory)"
      cd $(Build.ArtifactStagingDirectory)
      tree /F
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Build wheel

  # Publish wheel as build artifact (see "Summary" in Azure Pipelines build)
  # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/utility/publish-build-artifacts?view=azdevops
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: drop-$(python.version)